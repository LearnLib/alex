(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{434:function(e,t,a){e.exports=a.p+"assets/img/aal.2862d53c.jpg"},435:function(e,t,a){e.exports=a.p+"assets/img/workflow.9ad492ac.png"},512:function(e,t,a){"use strict";a.r(t);var n=a(65),i=Object(n.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"user-manual"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#user-manual"}},[e._v("#")]),e._v(" User manual")]),e._v(" "),n("p",[e._v("Here and in the following sections, we present a detailed explanation of the concepts and ways to use ALEX.\nIf you find bugs of any kind relating this application or inaccuracies in this manual, "),n("a",{attrs:{href:"mailto:alexander.bainczyk@tu-dortmund.de,marco.krumrey@tu-dortmund.de"}},[e._v("let us")]),e._v(" know.")]),e._v(" "),n("h2",{attrs:{id:"features"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[e._v("#")]),e._v(" Features")]),e._v(" "),n("p",[e._v("ALEX offers a simplicity-oriented way to execute learning experiments for web applications and web services using active automata learning.\nSince version 1.5.0 ALEX has been extended to support traditional UI and interface testing using Selenium as well.\nBased on features of "),n("a",{attrs:{href:"https://learnlib.de/",target:"_blank",rel:"noopener noreferrer"}},[e._v("LearnLib"),n("OutboundLink")],1),e._v(", ALEX lays a focus on the ease to use of the tool while offering an extensive feature set, including:")]),e._v(" "),n("ul",[n("li",[e._v("Inferring Mealy machines of web applications and web services using active automata learning techniques")]),e._v(" "),n("li",[e._v("Graphical symbol and learning process modelling")]),e._v(" "),n("li",[e._v("Automatic generation and visualization of\n"),n("ul",[n("li",[e._v("Models")]),e._v(" "),n("li",[e._v("Algorithmic data structures (observation table and discrimination tree)")]),e._v(" "),n("li",[e._v("Statistics of learning experiments")])])]),e._v(" "),n("li",[e._v("Simultaneous learning of web applications and web services")]),e._v(" "),n("li",[e._v("Various learning algorithms and equivalence approximation strategies")]),e._v(" "),n("li",[e._v("LTL-based model checking")]),e._v(" "),n("li",[e._v("GUI testing capabilities")]),e._v(" "),n("li",[e._v("And much more...")])]),e._v(" "),n("h2",{attrs:{id:"required-skills"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#required-skills"}},[e._v("#")]),e._v(" Required skills")]),e._v(" "),n("p",[e._v("As a user of ALEX and tester of web applications, you should")]),e._v(" "),n("ul",[n("li",[e._v("be familiar with HTML and CSS")]),e._v(" "),n("li",[e._v("be familiar with REST interfaces and exchange formats like JSON")]),e._v(" "),n("li",[e._v("have a basic understanding of web application testing")]),e._v(" "),n("li",[e._v("have a basic understanding of active automata learning")])]),e._v(" "),n("p",[e._v("It helps if you are familiar with programming in general and have already used Selenium.")]),e._v(" "),n("h2",{attrs:{id:"terminology"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#terminology"}},[e._v("#")]),e._v(" Terminology")]),e._v(" "),n("p",[e._v("This document contains some terms related to automata learning which are listed in the following:")]),e._v(" "),n("definition",{attrs:{term:"System under Learning (SUL)"}},[e._v("\n    The system we want to infer an automaton model from.\n    Often also called system under testing (SUT).\n")]),e._v(" "),n("definition",{attrs:{term:"Symbol"}},[e._v("\n    We differentiate between input and output symbols.\n    Input symbols are modeled by the user and define possible inputs to a system, like a click.\n    Output symbols specify how the system reacts to inputs.\n")]),e._v(" "),n("definition",{attrs:{term:"Word"}},[e._v("\n    A sequence of symbols, e.g. "),n("em",[e._v("Authenticate, Create Entity, Read Entity, Delete Entity, Logout")]),e._v(".\n")]),e._v(" "),n("definition",{attrs:{term:"Learner"}},[e._v("\n    A learner is an algorithm that infers an automaton model of an application by posing words to the SUL and analyzing its outputs.\n")]),e._v(" "),n("definition",{attrs:{term:"Membership query"}},[e._v("\n    The words the learner poses to the system are called membership queries.\n")]),e._v(" "),n("definition",{attrs:{term:"Equivalence query"}},[e._v("\n    An equivalence query is posed by an equivalence oracle. \n    It checks whether the learned automaton represents the behavior of the tested application correctly.\n")]),e._v(" "),n("definition",{attrs:{term:"Hypothesis"}},[e._v("\n    A hypothesis is the behavioral automaton model that is learned.\n    The model is called hypothesis due to the black-box nature of the SUL. \n    Theoretically, there can always exist a behavior that is not captured by the model.\n")]),e._v(" "),n("definition",{attrs:{term:"Counterexample"}},[e._v("\n    A counterexample is a word, where the output of the system and the learned model differ.\n    Counterexamples are used to trigger the refinement of the model.\n    We call a model the "),n("em",[e._v("final hypothesis")]),e._v(", if no counterexamples can be found.\n")]),e._v(" "),n("p",[e._v("The following graphic illustrates the general learning process and thus the relation between the terms listed above.")]),e._v(" "),n("img",{staticStyle:{display:"block",width:"70%",margin:"auto"},attrs:{src:a(434)}}),e._v(" "),n("h2",{attrs:{id:"workflow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#workflow"}},[e._v("#")]),e._v(" Workflow")]),e._v(" "),n("p",[e._v("ALEX covers all aspects of "),n("em",[e._v("learning-based testing")]),e._v(".\nThe following diagram illustrates how the tool supports learning, testing and model checking of web applications.")]),e._v(" "),n("img",{staticStyle:{display:"block",width:"100%",margin:"auto"},attrs:{src:a(435)}})],1)}),[],!1,null,null,null);t.default=i.exports}}]);